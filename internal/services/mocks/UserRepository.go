// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// StoreRefreshToken provides a mock function with given fields: userID, ip, email, hashedToken
func (_m *UserRepository) StoreRefreshToken(userID string, ip string, email string, hashedToken []byte) error {
	ret := _m.Called(userID, ip, email, hashedToken)

	if len(ret) == 0 {
		panic("no return value specified for StoreRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []byte) error); ok {
		r0 = rf(userID, ip, email, hashedToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyIP provides a mock function with given fields: userID, ip
func (_m *UserRepository) VerifyIP(userID string, ip string) (bool, string, error) {
	ret := _m.Called(userID, ip)

	if len(ret) == 0 {
		panic("no return value specified for VerifyIP")
	}

	var r0 bool
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, string, error)); ok {
		return rf(userID, ip)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(userID, ip)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(userID, ip)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(userID, ip)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// VerifyRefreshToken provides a mock function with given fields: userID, refreshToken
func (_m *UserRepository) VerifyRefreshToken(userID string, refreshToken string) (bool, error) {
	ret := _m.Called(userID, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for VerifyRefreshToken")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(userID, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(userID, refreshToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
