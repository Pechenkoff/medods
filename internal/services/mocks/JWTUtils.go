// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	entities "medods/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// JWTUtils is an autogenerated mock type for the JWTUtils type
type JWTUtils struct {
	mock.Mock
}

// GenerateAccessToken provides a mock function with given fields: userID
func (_m *JWTUtils) GenerateAccessToken(userID string) (string, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseJWT provides a mock function with given fields: tokenString
func (_m *JWTUtils) ParseJWT(tokenString string) (*entities.UserClaims, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ParseJWT")
	}

	var r0 *entities.UserClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.UserClaims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.UserClaims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJWTUtils creates a new instance of JWTUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTUtils {
	mock := &JWTUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
