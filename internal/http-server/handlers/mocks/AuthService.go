// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	entities "medods/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

type AuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthService) EXPECT() *AuthService_Expecter {
	return &AuthService_Expecter{mock: &_m.Mock}
}

// GenerateTokens provides a mock function with given fields: userID, ipAddress, email
func (_m *AuthService) GenerateTokens(userID string, ipAddress string, email string) (*entities.TokenPair, error) {
	ret := _m.Called(userID, ipAddress, email)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTokens")
	}

	var r0 *entities.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*entities.TokenPair, error)); ok {
		return rf(userID, ipAddress, email)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *entities.TokenPair); ok {
		r0 = rf(userID, ipAddress, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(userID, ipAddress, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_GenerateTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateTokens'
type AuthService_GenerateTokens_Call struct {
	*mock.Call
}

// GenerateTokens is a helper method to define mock.On call
//   - userID string
//   - ipAddress string
//   - email string
func (_e *AuthService_Expecter) GenerateTokens(userID interface{}, ipAddress interface{}, email interface{}) *AuthService_GenerateTokens_Call {
	return &AuthService_GenerateTokens_Call{Call: _e.mock.On("GenerateTokens", userID, ipAddress, email)}
}

func (_c *AuthService_GenerateTokens_Call) Run(run func(userID string, ipAddress string, email string)) *AuthService_GenerateTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthService_GenerateTokens_Call) Return(_a0 *entities.TokenPair, _a1 error) *AuthService_GenerateTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_GenerateTokens_Call) RunAndReturn(run func(string, string, string) (*entities.TokenPair, error)) *AuthService_GenerateTokens_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshTokens provides a mock function with given fields: accessToken, refreshToken, userIP
func (_m *AuthService) RefreshTokens(accessToken string, refreshToken string, userIP string) (*entities.TokenPair, error) {
	ret := _m.Called(accessToken, refreshToken, userIP)

	if len(ret) == 0 {
		panic("no return value specified for RefreshTokens")
	}

	var r0 *entities.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*entities.TokenPair, error)); ok {
		return rf(accessToken, refreshToken, userIP)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *entities.TokenPair); ok {
		r0 = rf(accessToken, refreshToken, userIP)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(accessToken, refreshToken, userIP)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_RefreshTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshTokens'
type AuthService_RefreshTokens_Call struct {
	*mock.Call
}

// RefreshTokens is a helper method to define mock.On call
//   - accessToken string
//   - refreshToken string
//   - userIP string
func (_e *AuthService_Expecter) RefreshTokens(accessToken interface{}, refreshToken interface{}, userIP interface{}) *AuthService_RefreshTokens_Call {
	return &AuthService_RefreshTokens_Call{Call: _e.mock.On("RefreshTokens", accessToken, refreshToken, userIP)}
}

func (_c *AuthService_RefreshTokens_Call) Run(run func(accessToken string, refreshToken string, userIP string)) *AuthService_RefreshTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthService_RefreshTokens_Call) Return(_a0 *entities.TokenPair, _a1 error) *AuthService_RefreshTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_RefreshTokens_Call) RunAndReturn(run func(string, string, string) (*entities.TokenPair, error)) *AuthService_RefreshTokens_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
